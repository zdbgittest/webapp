/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2016-06-15 05:25:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.templates.test;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class testWobSocket_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n");
      out.write("<!--\r\n");
      out.write("  Licensed to the Apache Software Foundation (ASF) under one or more\r\n");
      out.write("  contributor license agreements.  See the NOTICE file distributed with\r\n");
      out.write("  this work for additional information regarding copyright ownership.\r\n");
      out.write("  The ASF licenses this file to You under the Apache License, Version 2.0\r\n");
      out.write("  (the \"License\"); you may not use this file except in compliance with\r\n");
      out.write("  the License.  You may obtain a copy of the License at\r\n");
      out.write("\r\n");
      out.write("      http://www.apache.org/licenses/LICENSE-2.0\r\n");
      out.write("\r\n");
      out.write("  Unless required by applicable law or agreed to in writing, software\r\n");
      out.write("  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n");
      out.write("  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n");
      out.write("  See the License for the specific language governing permissions and\r\n");
      out.write("  limitations under the License.\r\n");
      out.write("-->\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Apache Tomcat WebSocket Examples: Chat</title>\r\n");
      out.write("    <style type=\"text/css\"><![CDATA[\r\n");
      out.write("        input#chat {\r\n");
      out.write("            width: 410px\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #console-container {\r\n");
      out.write("            width: 400px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #console {\r\n");
      out.write("            border: 1px solid #CCCCCC;\r\n");
      out.write("            border-right-color: #999999;\r\n");
      out.write("            border-bottom-color: #999999;\r\n");
      out.write("            height: 170px;\r\n");
      out.write("            overflow-y: scroll;\r\n");
      out.write("            padding: 5px;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #console p {\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("        }\r\n");
      out.write("    ]]></style>\r\n");
      out.write("    <script type=\"application/javascript\"><![CDATA[\r\n");
      out.write("        \"use strict\";\r\n");
      out.write("\r\n");
      out.write("        var Chat = {};\r\n");
      out.write("\r\n");
      out.write("        Chat.socket = null;\r\n");
      out.write("\r\n");
      out.write("        Chat.connect = (function(host) {\r\n");
      out.write("            if ('WebSocket' in window) {\r\n");
      out.write("                Chat.socket = new WebSocket(host);\r\n");
      out.write("            } else if ('MozWebSocket' in window) {\r\n");
      out.write("                Chat.socket = new MozWebSocket(host);\r\n");
      out.write("            } else {\r\n");
      out.write("                Console.log('Error: WebSocket is not supported by this browser.');\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            Chat.socket.onopen = function () {\r\n");
      out.write("                Console.log('Info: WebSocket connection opened.');\r\n");
      out.write("                document.getElementById('chat').onkeydown = function(event) {\r\n");
      out.write("                    if (event.keyCode == 13) {\r\n");
      out.write("                        Chat.sendMessage();\r\n");
      out.write("                    }\r\n");
      out.write("                };\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            Chat.socket.onclose = function () {\r\n");
      out.write("                document.getElementById('chat').onkeydown = null;\r\n");
      out.write("                Console.log('Info: WebSocket closed.');\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            Chat.socket.onmessage = function (message) {\r\n");
      out.write("                Console.log(message.data);\r\n");
      out.write("            };\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        Chat.initialize = function() {\r\n");
      out.write("            if (window.location.protocol == 'http:') {\r\n");
      out.write("                Chat.connect('ws://' + window.location.host + '/webSocket/createLink');\r\n");
      out.write("            } else {\r\n");
      out.write("                Chat.connect('wss://' + window.location.host + '/webSocket/createLink');\r\n");
      out.write("            }\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        Chat.sendMessage = (function() {\r\n");
      out.write("            var message = document.getElementById('chat').value;\r\n");
      out.write("            if (message != '') {\r\n");
      out.write("                Chat.socket.send(message);\r\n");
      out.write("                document.getElementById('chat').value = '';\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        var Console = {};\r\n");
      out.write("\r\n");
      out.write("        Console.log = (function(message) {\r\n");
      out.write("            var console = document.getElementById('console');\r\n");
      out.write("            var p = document.createElement('p');\r\n");
      out.write("            p.style.wordWrap = 'break-word';\r\n");
      out.write("            p.innerHTML = message;\r\n");
      out.write("            console.appendChild(p);\r\n");
      out.write("            while (console.childNodes.length > 25) {\r\n");
      out.write("                console.removeChild(console.firstChild);\r\n");
      out.write("            }\r\n");
      out.write("            console.scrollTop = console.scrollHeight;\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        Chat.initialize();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("            // Remove elements with \"noscript\" class - <noscript> is not allowed in XHTML\r\n");
      out.write("            var noscripts = document.getElementsByClassName(\"noscript\");\r\n");
      out.write("            for (var i = 0; i < noscripts.length; i++) {\r\n");
      out.write("                noscripts[i].parentNode.removeChild(noscripts[i]);\r\n");
      out.write("            }\r\n");
      out.write("        }, false);\r\n");
      out.write("\r\n");
      out.write("    ]]></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"noscript\"><h2 style=\"color: #ff0000\">Seems your browser doesn't support Javascript! Websockets rely on Javascript being enabled. Please enable\r\n");
      out.write("    Javascript and reload this page!</h2></div>\r\n");
      out.write("<div>\r\n");
      out.write("    <p>\r\n");
      out.write("        <input type=\"text\" placeholder=\"type and press enter to chat\" id=\"chat\" />\r\n");
      out.write("    </p>\r\n");
      out.write("    <div id=\"console-container\">\r\n");
      out.write("        <div id=\"console\"/>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
