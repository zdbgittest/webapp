/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2016-08-11 06:51:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.templates.mem;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class memTestNew_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"/jquery/jquery-1.3.1.min.js\"></script>\r\n");
      out.write("<title>第二个memcached测试页面</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<br><br>\r\n");
      out.write("\t下边是往memcached中添加数据\r\n");
      out.write("\t<br>\r\n");
      out.write("\tkey：<input id=\"key\" type=\"text\"/>\r\n");
      out.write("\tvalue：<input id=\"value\" type=\"text\"/>\r\n");
      out.write("\t<input type=\"button\" value=\"提交\" onclick=\"setMem()\"/>\r\n");
      out.write("\t<span style=\"color: red;width: 200px;\" id=\"notice\"></span>\r\n");
      out.write("\t缓存消失提醒：<span style=\"color: red;width: 200px;\" id=\"timeSpanId\"></span>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<br><br>\r\n");
      out.write("\t下边是获取memcached中的值\r\n");
      out.write("\t<br>\r\n");
      out.write("\tkey：<input type=\"text\" id=\"getMemKey\" />\r\n");
      out.write("\tvalue：<span style=\"color: red;width: 200px;\" id=\"getValue\"></span>\r\n");
      out.write("\t<input type=\"button\" id=\"\" value=\"获取值\" onclick=\"getMem()\"/>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<br><br>\r\n");
      out.write("\t下边是测试memcached缓存\r\n");
      out.write("\t<br>\r\n");
      out.write("\tkey：<input type=\"text\" id=\"testKey\"/>\r\n");
      out.write("\tvalue：<input type=\"text\" id=\"testValue\"/>\r\n");
      out.write("\t<input type=\"button\" id=\"\" value=\"replace\" onclick=\"testMem()\"/>\r\n");
      out.write("\t<span style=\"color: red;width: 200px;\" id=\"testMemNotice\"></span>\r\n");
      out.write("</body>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar time;\r\n");
      out.write("\tvar timer;//定时器\r\n");
      out.write("\tfunction setMem(){\r\n");
      out.write("\t\tclearInterval(timer);    //清除定时器\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\ttype:\"POST\",\r\n");
      out.write("\t\t\turl:\"/mem/setMem.action\",\r\n");
      out.write("\t\t\tdata:\"key=\"+$(\"#key\").val()+\"&value=\"+$(\"#value\").val(),\r\n");
      out.write("\t\t\tdataType:\"txt\",\r\n");
      out.write("\t\t\tcache:false,\r\n");
      out.write("\t\t\tasync:false,\r\n");
      out.write("\t\t\tsuccess:function(data){\r\n");
      out.write("\t\t\t\t$(\"#notice\").text(data);\r\n");
      out.write("\t\t\t\t$(\"#testKey\").val($(\"#key\").val());\r\n");
      out.write("\t\t\t\t$(\"#getMemKey\").val($(\"#key\").val());\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\ttime = 20;\r\n");
      out.write("\t\t\t\t$(\"#timeSpanId\").text(time);\r\n");
      out.write("\t\t\t\ttimer = setInterval(function(){daojishi();},1000);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction daojishi(){\r\n");
      out.write("\t\tif(time == 0){\r\n");
      out.write("\t\t\t$(\"#timeSpanId\").text(\"缓存消失了！\");\r\n");
      out.write("\t\t\tclearInterval(timer);    //清除定时器\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\ttime = time - 1;\r\n");
      out.write("\t\t\t$(\"#timeSpanId\").text(time);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction getMem(){\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\ttype:\"POST\",\r\n");
      out.write("\t\t\turl:\"/mem/getMem.action\",\r\n");
      out.write("\t\t\tdata:\"key=\"+$(\"#getMemKey\").val(),\r\n");
      out.write("\t\t\tdataType:\"txt\",\r\n");
      out.write("\t\t\tcache:false,\r\n");
      out.write("\t\t\tasync:false,\r\n");
      out.write("\t\t\tsuccess:function(data){\r\n");
      out.write("\t\t\t\t$(\"#getValue\").text(data);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction testMem(){\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\ttype:\"POST\",\r\n");
      out.write("\t\t\turl:\"/mem/testMem.action\",\r\n");
      out.write("\t\t\tdata:\"key=\"+$(\"#testKey\").val()+\"&value=\"+$(\"#testValue\").val(),\r\n");
      out.write("\t\t\tdataType:\"txt\",\r\n");
      out.write("\t\t\tcache:false,\r\n");
      out.write("\t\t\tasync:false,\r\n");
      out.write("\t\t\tsuccess:function(data){\r\n");
      out.write("\t\t\t\t$(\"#testMemNotice\").text(data);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
